#+TITLE: Check the Feasibility of Equation Generated by Python
#+AUTHOR: Changyuan Lin
#+EMAIL: linchangyuan1996@gmail.com
#+Latex_header: \usepackage{float}
#+Latex_header: \newcommand{\aDE}[4]{\begin{center}\begin{equation}\label{#4}\frac{{dy(t)}}{{dt}} -#1y(t) = #2u(t),y(0) = #3 \end{equation}\end{center}}
#+BEGIN: db
#+END:


#+Name: isShell
#+Begin_src python :var isShell=1 :exports none
return isShell
#+end_src

#+RESULTS: isShell
: 0

#+Name: par
#+Begin_src python :var input="0000777" :exports none
import numpy as np
a=np.arange(0.1,2,0.2)
b=np.arange(0.1,2,0.2)
Y_0=np.arange(0.1,5,0.5)
par=[round((a[eval(input[4])]),1),round(b[eval(input[5])],1),round(Y_0[eval(input[6])],1)]
return par
#+end_src

#+RESULTS: par
| 0.9 | 1.1 | 4.1 |
#+ATTR_LATEX: \newpage
* Chapter 1
** Equation Generated by Python
Consider the differential equation given below.
#+Name: Generate_Equation1
#+Begin_src python :var texCommName="aDE" :var ParNum=3 :var par=par :var label="eq1" :var isShell=isShell :results value raw :exports results
if(isShell==1):
    st="\\"+texCommName
else:
    st="\(\\"+texCommName
for i in range(ParNum):
    st+="{"+str(par[i])+"}"
st+="{"+label+"}"
if(isShell==0):
    st+="\)"
return st
#+end_src

#+RESULTS: Generate_Equation1
** The Table Part
Consider the singal given below.
#+BEGIN_COMMENT
#+tblname: signal 
|  k | y |
|----+---|
|  0 | 2 |
|  2 | 2 |
|  2 | 4 |
|  4 | 4 |
|  6 | 4 |
|  6 | 3 |
|  8 | 3 |
|  8 | 2 |
| 10 | 8 |
#+TBLFM:
#+END_COMMENT

#+RESULTS:

#+Begin_src python :var fname="plot.png" :var signal=signal :results file :exports results
import matplotlib.pyplot as plt
k, y =zip(*signal)
fig = plt.figure()
axes = fig.add_subplot(1,1,1)
axes.plot(k, y, marker='o')
fig.savefig(fname)
return fname
#+end_src

   #+ATTR_LATEX: :width 0.5in :placement [!htpb]
   #+CAPTION: Reconstruct signal \(y(t)\).
   #+LABEL: FIG:fig2
   #+NAME: FIG:fig2
   #+RESULTS:
   [[file:plot.png]]
  
** The Inline Equation Part
Consider the differential equation given below.
#+Name: Generate_Equation2
#+Begin_src python :var texCommName="aDE" :var ParNum=3 :var par=par :var label="eq2" :var isShell=isShell :results value raw :exports results
if(isShell==1):
    st="\\"+texCommName
else:
    st="\(\\"+texCommName
for i in range(ParNum):
    st+="{"+str(par[i])+"}"
st+="{"+label+"}"
if(isShell==0):
    st+="\)"
return st
#+end_src

#+RESULTS: Generate_Equation2
#+Name: Generate_eqq
#+Begin_src python :results value raw :exports results
return "#+MACRO: eqq 123"
#+end_src
#+RESULTS: Generate_eqq

   - Find an integral form solution for Eq.\ref{eq2}.
   - Find an analytic solution for Eq.\ref{eq2} when the input \(u(t)\) is  given as , for \(t\ge 0\). Is this input able to stabilize state \(y(t)\) when \( t\rightarrow  \infty\)?
   - Find the difference equation when sampleo time is \(\triangle t=0.3\) by exact discretization.
   - Find the difference equation with time derivative approximated at \(\triangle t=0.3\) by finite difference method.
   - Find a solution of difference equation and exact diference equation using  MATLAB or any other software for \(k=20\).  Plot the sequence of numbers obtained by the exact difference equation and by finite difference method and applied piecewise constant input given as follows
     \[ \begin{array}{c} u(0) = -2 \\u(1\triangle t) = -2e^{-2*1\triangle t} \\ u(2\triangle t) = -2e^{-2*2\triangle t} \\ \cdots=\cdots \\ u(k\triangle t)= -2e^{-2*k\triangle t}\end{array} \]

     with k=20

     Solution:







     - \[y(t)=5e^{2t}+1.5e^{2t}\int_0^t (-2) e^{-2s}e^{-2s}ds= 5e^{2t}-3e^{2t} \int_0^t e^{-4s}ds=5e^{2t}-3\int_0^t e^{-4s}\frac{d(-4s)}{-4} \]
       \[y(t)=5e^{2t}+\frac{3}{4}\left[e^{-4t}-1\right]\]
     - Exact discretization \(\Delta t = 0.3\):
       \[\begin{array}{rcl}
       y_{k+1} &=& e^{a\Delta t}y_{k} + a^{-1}(e^{a\Delta t}-1)bu_{k} \\[0.25cm]
       &=& 1.822y_{k} + 0.6166u_{k}
       \end{array}\]

     - Finite difference method \(\Delta t=0.3\):
       \[\begin{array}{rcl}  \frac{dy}{dt} \approx \frac{y_{k+1}-y_{k}}{\Delta t} &=& 2y_{k} + 1.5u_{k} \\[0.25cm]
         y_{k+1} &=& (1+2\Delta t)y_{k} + 1.5(\Delta t )u_{k} \\[0.25cm]
         &=& 1.6y_{k} + 0.45u_{k}
         \end{array}\]
   
    #+Begin_src python :var fname="plot1.png" :results file :exports results
     import matplotlib.pyplot as plt
     import numpy as np
     from math import exp
     k=20
     ye_p=np.arange(0,k,1)
     ye_p[0]=5;Y=5;
     yd_p=np.arange(0,k,1)
     yd_p[0]=5;Yd=5;
     x=np.arange(0,k,1)

     for k in range(1,k):
         Y=1.822*Y+0.6166*(-2*exp((k-1)*0.3))
	 Yd=1.6*Yd+0.45*(-2*exp((k-1)*0.3))
	 ye_p[k]=Y
	 yd_p[k]=Yd

     fig = plt.figure()
     axes = fig.add_subplot(1,1,1)
     axes.plot(x,ye_p, marker='o')
     axes.plot(x,yd_p, marker='+')
     plt.ylabel('y exact -o- and y approx -+-')
     fig.savefig(fname)
     return fname
     #+end_src
    #+ATTR_LATEX: :width 4in :placement [!htpb]
    #+CAPTION: Finite difference and exact discretization \(y(k)\).
    #+LABEL: FIG:fig3
    #+NAME: FIG:fig3
    #+RESULTS:
    [[file:plot1.png]]



